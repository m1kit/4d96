{"version":3,"sources":["main.js"],"names":["board","turn","State","INVALID","EMPTY","RED","GREEN","BLUE","Direction","UPPER_LEFT","LOWER_RIGHT","LEFT","RIGHT","LOWER_LEFT","UPPER_RIGHT","INITIAL_STATE","Board","size","_this","this","_classCallCheck","svg","document","getElementById","innerHTML","setAttribute","Math","sqrt","data","Array","_loop","y","_loop2","x","d","yBase","floor","xBase1","xBase2","insertAdjacentHTML","cell","addEventListener","cc","player","Error","targets","getReplacables","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","p","value","fill","concat","err","return","flush","length","putForcibly","_createClass","key","color","at","ds","getAvailableDirections","placed","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","outer","_step2","_iterator2","c","push","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","apply","_toConsumableArray","result","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","Object","values","valid","s","isAvailable","r","count","g","b","direction","console","log","scoreboard","possible","_arr","_i","innerText","classList","add","remove","put","stack","confirm","init","max","parseInt","location","hash","substr","_loop3","_loop4","onclick"],"mappings":"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","file":"main.min.js","sourcesContent":["/* eslint-env browser */\n/* eslint no-labels: 0, no-loop-func: 0, no-constant-condition: 0, no-unused-vars: 0, no-alert: 0, no-console: 0, no-case-declarations: 0 */\n(function() {\n  'use strict';\n  let board;\n  let turn;\n\n  const State = {\n    INVALID: 0,\n    EMPTY: 1,\n    RED: 2,\n    GREEN: 3,\n    BLUE: 4\n  };\n  const Direction = {\n    UPPER_LEFT: 0,\n    LOWER_RIGHT: 1,\n    LEFT: 2,\n    RIGHT: 3,\n    LOWER_LEFT: 4,\n    UPPER_RIGHT: 5\n  };\n  const INITIAL_STATE = [\n    [null, null, null, State.GREEN, State.BLUE, State.EMPTY, State.BLUE, State.RED],\n    [null, State.GREEN, State.EMPTY, State.EMPTY, State.EMPTY, State.EMPTY, State.EMPTY, State.RED],\n    [State.RED, State.EMPTY, State.EMPTY, State.EMPTY, State.EMPTY, State.EMPTY, State.GREEN, null],\n    [State.RED, State.BLUE, State.EMPTY, State.BLUE, State.GREEN, null, null, null]\n  ];\n\n  class Board {\n    constructor(size) {\n      const svg = document.getElementById('board-shape');\n      svg.innerHTML = '';\n      document.getElementById('board').setAttribute('viewBox', '0 ' + size + ' ' + (2 * size * Math.sqrt(3)) + ' ' + (4 * size));\n      this.size = size;\n      this.data = new Array(size * 2);\n      for (let y = 0; y < this.data.length; y++) {\n        this.data[y] = new Array(size * 4);\n        for (let x = 0; x < this.data[y].length; x++) {\n          const d = 2 * y + x;\n          if (2 * size - 1 > d || d > 6 * size - 2) {\n            this.data[y][x] = State.INVALID;\n            continue;\n          }\n          this.data[y][x] = State.EMPTY;\n\n          // board generation\n          const yBase = 2 * y + Math.floor(x / 2);\n          const xBase1 = Math.floor(x / 2) * Math.sqrt(3);\n          const xBase2 = Math.floor(x / 2 + 1) * Math.sqrt(3);\n          svg.insertAdjacentHTML('beforeend',\n            '<polygon id=\"' + y + '-' + x + '\" points=\"' +\n            xBase2 + ',' + (yBase + 1) + ' ' +\n            xBase1 + ',' + (yBase + 2) + ' ' +\n            (x % 2 === 0 ?\n              xBase1 + ' ' + yBase :\n              xBase2 + ' ' + (yBase + 3)) +\n            '\" stroke-width=\".025\"></polygon>'\n          );\n          cell(x, y).addEventListener('mouseenter', () => {\n            let cc;\n            switch (player()) {\n              case State.RED:\n                cc = '#ff8494';\n                break;\n              case State.GREEN:\n                cc = '#68e4bb';\n                break;\n              case State.BLUE:\n                cc = '#6e92dd';\n                break;\n              default:\n                throw new Error();\n            }\n            const targets = this.getReplacables(x, y, player());\n            for (let p of targets) {\n              fill(...p, cc);\n            }\n          }, false);\n          cell(x, y).addEventListener('mouseleave', () => {\n            flush();\n          }, false);\n        }\n      }\n      for (let y = 0; y < INITIAL_STATE.length; y++) {\n        for (let x = 0; x < INITIAL_STATE[y].length; x++) {\n          if (INITIAL_STATE[y][x]) {\n            this.putForcibly(x + 2 * (size - 2), y + (size - 2), INITIAL_STATE[y][x]);\n          }\n        }\n      }\n    }\n\n    getReplacables(x, y, color) {\n      if (this.at(x, y) === State.EMPTY) {\n        const ds = this.getAvailableDirections(x, y, color);\n        if (ds.length === 0) {\n          return [];\n        }\n        const placed = [[x, y]];\n        outer: for (let d of ds) {\n          let c = [x, y];\n          while (true) {\n            c = Board.next(c[0], c[1], d);\n            if (this.at(c[0], c[1]) === color) {\n              continue outer;\n            }\n            placed.push([c[0], c[1]]);\n          }\n        }\n        return placed;\n      }\n      return [];\n    }\n\n    put(x, y, color) {\n      const p = this.getReplacables(x, y, color);\n      if (p.length === 0) {\n        return false;\n      }\n      for (let c of p) {\n        this.putForcibly(...c, color);\n      }\n      return true;\n    }\n\n    putForcibly(x, y, color) {\n      this.data[y][x] = color;\n    }\n\n    at(x, y) {\n      if (x < 0 || y < 0 || x >= this.size * 4 || y >= this.size * 2) {\n        return State.INVALID;\n      }\n      return this.data[y][x];\n    }\n\n    getAvailableDirections(x, y, color) {\n      if (this.at(x, y) !== State.EMPTY) {\n        return [];\n      }\n      let result = [];\n      outer: for (let d of Object.values(Direction)) {\n        let c = [x, y];\n        let valid = false;\n        while (true) {\n          c = Board.next(c[0], c[1], d);\n          const s = this.at(...c);\n          if (s === color) {\n            if (valid) {\n              result.push(d);\n            }\n            continue outer;\n          } else if (s === State.EMPTY || s === State.INVALID) {\n            continue outer;\n          } else {\n            valid = true;\n          }\n        }\n      }\n      return result;\n    }\n\n    isAvailable(x, y, color) {\n      return this.getAvailableDirections(x, y, color).length > 0;\n    }\n\n    getAvailables(color) {\n      const result = [];\n      for (let y = 0; y < this.data.length; y++) {\n        for (let x = 0; x < this.data[y].length; x++) {\n          if (this.isAvailable(x, y, color)) {\n            result.push([x, y]);\n          }\n        }\n      }\n      return result;\n    }\n\n    count(color) {\n      let c = 0;\n      for (let y = 0; y < this.data.length; y++) {\n        for (let x = 0; x < this.data[y].length; x++) {\n          if (this.at(x, y) === color) {\n            c++;\n          }\n        }\n      }\n      return c;\n    }\n\n    getWhoWon() {\n      const r = this.count(State.RED);\n      const g = this.count(State.GREEN);\n      const b = this.count(State.BLUE);\n      if (r >= g && r >= b) {\n        return State.RED;\n      }\n      return g >= b ? State.GREEN : State.BLUE;\n    }\n\n    static next(x, y, direction) {\n      switch (direction) {\n        case Direction.UPPER_LEFT:\n          return [x + (x % 2 === 0 ? 1 : -1), y - (x % 2 === 0 ? 1 : 0)];\n        case Direction.LOWER_RIGHT:\n          return [x + (x % 2 === 0 ? 1 : -1), y + (x % 2 === 0 ? 0 : 1)];\n        case Direction.LEFT:\n          return [x - 1, y];\n        case Direction.RIGHT:\n          return [x + 1, y];\n        case Direction.LOWER_LEFT:\n          return [x - 1, y + (x % 2 === 0 ? 0 : 1)];\n        case Direction.UPPER_RIGHT:\n          return [x + 1, y - (x % 2 === 0 ? 1 : 0)];\n        default:\n          throw new Error();\n      }\n    }\n  }\n\n  function cell(x, y) {\n    const cell = document.getElementById(y + '-' + x);\n    if (cell === null) {\n      console.log(x + ',' + y);\n    }\n    return cell;\n  }\n\n  function scoreboard(color) {\n    switch (color) {\n      case State.RED:\n        return document.getElementById('red');\n      case State.GREEN:\n        return document.getElementById('green');\n      case State.BLUE:\n        return document.getElementById('blue');\n      default:\n        throw new Error();\n    }\n  }\n\n  function fill(x, y, color) {\n    cell(x, y).setAttribute('fill', color);\n  }\n\n  function player() {\n    switch (turn % 3) {\n      case 0:\n        return State.RED;\n      case 1:\n        return State.GREEN;\n      case 2:\n        return State.BLUE;\n      default:\n        throw new Error();\n    }\n  }\n\n  function flush() {\n    let possible = false;\n    for (let y = 0; y < board.size * 2; y++) {\n      for (let x = 0; x < board.size * 4; x++) {\n        switch (board.at(x, y)) {\n          case State.INVALID:\n            continue;\n          case State.EMPTY:\n            const p = board.getReplacables(x, y, player());\n            if (p.length === 0) {\n              fill(x, y, '#adadad');\n            } else {\n              fill(x, y, '#f8fbf8');\n              possible = true;\n            }\n            break;\n          case State.RED:\n            fill(x, y, '#e95464');\n            break;\n          case State.GREEN:\n            fill(x, y, '#38b48b');\n            break;\n          case State.BLUE:\n            fill(x, y, '#3e62ad');\n            break;\n          default:\n            throw new Error();\n        }\n      }\n    }\n    for (let color of [State.RED, State.GREEN, State.BLUE]) {\n      scoreboard(color).innerText = board.count(color);\n      if (player() === color) {\n        scoreboard(color).classList.add('player');\n      } else {\n        scoreboard(color).classList.remove('player');\n      }\n    }\n    return possible;\n  }\n\n  function put(x, y) {\n    if (board.put(x, y, player())) {\n      next(0);\n    }\n  }\n\n  function next(stack) {\n    if (stack >= 3) {\n      flush();\n      if (confirm('試合が終了しました。次の試合を開始します。')) {\n        init();\n      }\n    } else {\n      turn++;\n      if (!flush()) {\n        next(stack + 1);\n      }\n    }\n  }\n\n  function init() {\n    const size = Math.max(2, parseInt(location.hash.substr(1), 10)) || 4;\n    board = new Board(size);\n    turn = 0;\n    for (let y = 0; y < board.size * 2; y++) {\n      for (let x = 0; x < board.size * 4; x++) {\n        if (board.at(x, y) !== State.INVALID) {\n          cell(x, y).onclick = () => put(x, y);\n        }\n      }\n    }\n    flush();\n  }\n  init();\n})();\n"]}